{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'LoginView',\n  data() {\n    return {\n      username: '',\n      password: '',\n      loading: false,\n      error: '',\n      showRegisterForm: false,\n      regUsername: '',\n      regPassword: '',\n      regLoading: false,\n      regError: '',\n      regSuccess: ''\n    };\n  },\n  created() {\n    // 如果已登录则跳转到文件列表页\n    if (localStorage.getItem('userId')) {\n      this.$router.push('/files');\n    }\n  },\n  methods: {\n    async login() {\n      this.loading = true;\n      this.error = '';\n      try {\n        const response = await this.$axios.post('/user/login', {\n          username: this.username,\n          password: this.password\n        });\n\n        // 检查API返回的success字段\n        if (response.data.success) {\n          // 登录成功，保存userId到localStorage\n          localStorage.setItem('userId', response.data.userId);\n          localStorage.setItem('username', this.username);\n          this.$router.push('/files');\n        } else {\n          // API返回了success=false\n          this.error = response.data.message || '登录失败，请检查用户名和密码';\n        }\n      } catch (error) {\n        console.error('登录错误:', error);\n        // 详细错误日志\n        if (error.response) {\n          console.error('错误状态:', error.response.status);\n          console.error('错误数据:', error.response.data);\n          this.error = error.response.data.message || '登录失败，服务器错误';\n        } else if (error.request) {\n          console.error('没有收到响应');\n          this.error = '无法连接到服务器，请检查网络连接';\n        } else {\n          console.error('请求错误:', error.message);\n          this.error = '登录请求错误';\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    async register() {\n      this.regLoading = true;\n      this.regError = '';\n      this.regSuccess = '';\n      try {\n        const response = await this.$axios.post('/user/register', {\n          username: this.regUsername,\n          password: this.regPassword\n        });\n\n        // 检查API返回的success字段\n        if (response.data.success) {\n          // 注册成功，根据API直接获取userId\n          localStorage.setItem('userId', response.data.userId);\n          localStorage.setItem('username', this.regUsername);\n          this.regSuccess = '注册成功，正在为您自动登录...';\n\n          // 延迟跳转，给用户时间看到成功消息\n          setTimeout(() => {\n            this.$router.push('/files');\n          }, 1000);\n        } else {\n          // API返回了success=false\n          this.regError = response.data.message || '注册失败，可能用户名已存在';\n        }\n      } catch (error) {\n        console.error('注册错误:', error);\n        // 详细错误日志\n        if (error.response) {\n          console.error('错误状态:', error.response.status);\n          console.error('错误数据:', error.response.data);\n          this.regError = error.response.data.message || '注册失败，服务器错误';\n        } else if (error.request) {\n          console.error('没有收到响应');\n          this.regError = '无法连接到服务器，请检查网络连接';\n        } else {\n          console.error('请求错误:', error.message);\n          this.regError = '注册请求错误';\n        }\n      } finally {\n        this.regLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","username","password","loading","error","showRegisterForm","regUsername","regPassword","regLoading","regError","regSuccess","created","localStorage","getItem","$router","push","methods","login","response","$axios","post","success","setItem","userId","message","console","status","request","register","setTimeout"],"sources":["src/components/Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <div class=\"login-card card\">\r\n      <h2>文件管理系统登录</h2>\r\n      <form @submit.prevent=\"login\">\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">用户名</label>\r\n          <input \r\n            id=\"username\" \r\n            v-model=\"username\" \r\n            type=\"text\" \r\n            placeholder=\"请输入用户名\" \r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"password\">密码</label>\r\n          <input \r\n            id=\"password\" \r\n            v-model=\"password\" \r\n            type=\"password\" \r\n            placeholder=\"请输入密码\" \r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"error\" v-if=\"error\">{{ error }}</div>\r\n        \r\n        <button type=\"submit\" class=\"login-btn\" :disabled=\"loading\">\r\n          {{ loading ? '登录中...' : '登录' }}\r\n        </button>\r\n        \r\n        <div class=\"register-link\">\r\n          <p>没有账号？</p>\r\n          <router-link to=\"/register\" class=\"register-btn\">注册新账号</router-link>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'LoginView',\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      loading: false,\r\n      error: '',\r\n      \r\n      showRegisterForm: false,\r\n      regUsername: '',\r\n      regPassword: '',\r\n      regLoading: false,\r\n      regError: '',\r\n      regSuccess: ''\r\n    }\r\n  },\r\n  created() {\r\n    // 如果已登录则跳转到文件列表页\r\n    if (localStorage.getItem('userId')) {\r\n      this.$router.push('/files');\r\n    }\r\n  },\r\n  methods: {\r\n    async login() {\r\n      this.loading = true;\r\n      this.error = '';\r\n      \r\n      try {\r\n        const response = await this.$axios.post('/user/login', {\r\n          username: this.username,\r\n          password: this.password\r\n        });\r\n        \r\n        // 检查API返回的success字段\r\n        if (response.data.success) {\r\n          // 登录成功，保存userId到localStorage\r\n          localStorage.setItem('userId', response.data.userId);\r\n          localStorage.setItem('username', this.username);\r\n          this.$router.push('/files');\r\n        } else {\r\n          // API返回了success=false\r\n          this.error = response.data.message || '登录失败，请检查用户名和密码';\r\n        }\r\n      } catch (error) {\r\n        console.error('登录错误:', error);\r\n        // 详细错误日志\r\n        if (error.response) {\r\n          console.error('错误状态:', error.response.status);\r\n          console.error('错误数据:', error.response.data);\r\n          this.error = error.response.data.message || '登录失败，服务器错误';\r\n        } else if (error.request) {\r\n          console.error('没有收到响应');\r\n          this.error = '无法连接到服务器，请检查网络连接';\r\n        } else {\r\n          console.error('请求错误:', error.message);\r\n          this.error = '登录请求错误';\r\n        }\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    async register() {\r\n      this.regLoading = true;\r\n      this.regError = '';\r\n      this.regSuccess = '';\r\n      \r\n      try {\r\n        const response = await this.$axios.post('/user/register', {\r\n          username: this.regUsername,\r\n          password: this.regPassword\r\n        });\r\n        \r\n        // 检查API返回的success字段\r\n        if (response.data.success) {\r\n          // 注册成功，根据API直接获取userId\r\n          localStorage.setItem('userId', response.data.userId);\r\n          localStorage.setItem('username', this.regUsername);\r\n          \r\n          this.regSuccess = '注册成功，正在为您自动登录...';\r\n          \r\n          // 延迟跳转，给用户时间看到成功消息\r\n          setTimeout(() => {\r\n            this.$router.push('/files');\r\n          }, 1000);\r\n        } else {\r\n          // API返回了success=false\r\n          this.regError = response.data.message || '注册失败，可能用户名已存在';\r\n        }\r\n      } catch (error) {\r\n        console.error('注册错误:', error);\r\n        // 详细错误日志\r\n        if (error.response) {\r\n          console.error('错误状态:', error.response.status);\r\n          console.error('错误数据:', error.response.data);\r\n          this.regError = error.response.data.message || '注册失败，服务器错误';\r\n        } else if (error.request) {\r\n          console.error('没有收到响应');\r\n          this.regError = '无法连接到服务器，请检查网络连接';\r\n        } else {\r\n          console.error('请求错误:', error.message);\r\n          this.regError = '注册请求错误';\r\n        }\r\n      } finally {\r\n        this.regLoading = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 80vh;\r\n}\r\n\r\n.login-card {\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\n.login-card h2, .login-card h3 {\r\n  margin-bottom: 1.5rem;\r\n  text-align: center;\r\n  color: #2c3e50;\r\n}\r\n\r\n.login-btn, .register-btn {\r\n  width: 100%;\r\n  margin-top: 1rem;\r\n  padding: 0.75rem;\r\n}\r\n\r\n.register-link {\r\n  margin-top: 1.5rem;\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.register-link button {\r\n  background: none;\r\n  color: #3498db;\r\n  border: none;\r\n  padding: 0;\r\n  font: inherit;\r\n  cursor: pointer;\r\n  text-decoration: underline;\r\n}\r\n\r\n.register-link button:hover {\r\n  color: #2980b9;\r\n  background: none;\r\n}\r\n\r\n.register-form {\r\n  margin-top: 2rem;\r\n  border-top: 1px solid #eee;\r\n  padding-top: 1.5rem;\r\n}\r\n</style> "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,QAAA;MACAC,OAAA;MACAC,KAAA;MAEAC,gBAAA;MACAC,WAAA;MACAC,WAAA;MACAC,UAAA;MACAC,QAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,IAAAC,YAAA,CAAAC,OAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,MAAA;MACA,KAAAd,OAAA;MACA,KAAAC,KAAA;MAEA;QACA,MAAAc,QAAA,cAAAC,MAAA,CAAAC,IAAA;UACAnB,QAAA,OAAAA,QAAA;UACAC,QAAA,OAAAA;QACA;;QAEA;QACA,IAAAgB,QAAA,CAAAlB,IAAA,CAAAqB,OAAA;UACA;UACAT,YAAA,CAAAU,OAAA,WAAAJ,QAAA,CAAAlB,IAAA,CAAAuB,MAAA;UACAX,YAAA,CAAAU,OAAA,kBAAArB,QAAA;UACA,KAAAa,OAAA,CAAAC,IAAA;QACA;UACA;UACA,KAAAX,KAAA,GAAAc,QAAA,CAAAlB,IAAA,CAAAwB,OAAA;QACA;MACA,SAAApB,KAAA;QACAqB,OAAA,CAAArB,KAAA,UAAAA,KAAA;QACA;QACA,IAAAA,KAAA,CAAAc,QAAA;UACAO,OAAA,CAAArB,KAAA,UAAAA,KAAA,CAAAc,QAAA,CAAAQ,MAAA;UACAD,OAAA,CAAArB,KAAA,UAAAA,KAAA,CAAAc,QAAA,CAAAlB,IAAA;UACA,KAAAI,KAAA,GAAAA,KAAA,CAAAc,QAAA,CAAAlB,IAAA,CAAAwB,OAAA;QACA,WAAApB,KAAA,CAAAuB,OAAA;UACAF,OAAA,CAAArB,KAAA;UACA,KAAAA,KAAA;QACA;UACAqB,OAAA,CAAArB,KAAA,UAAAA,KAAA,CAAAoB,OAAA;UACA,KAAApB,KAAA;QACA;MACA;QACA,KAAAD,OAAA;MACA;IACA;IAEA,MAAAyB,SAAA;MACA,KAAApB,UAAA;MACA,KAAAC,QAAA;MACA,KAAAC,UAAA;MAEA;QACA,MAAAQ,QAAA,cAAAC,MAAA,CAAAC,IAAA;UACAnB,QAAA,OAAAK,WAAA;UACAJ,QAAA,OAAAK;QACA;;QAEA;QACA,IAAAW,QAAA,CAAAlB,IAAA,CAAAqB,OAAA;UACA;UACAT,YAAA,CAAAU,OAAA,WAAAJ,QAAA,CAAAlB,IAAA,CAAAuB,MAAA;UACAX,YAAA,CAAAU,OAAA,kBAAAhB,WAAA;UAEA,KAAAI,UAAA;;UAEA;UACAmB,UAAA;YACA,KAAAf,OAAA,CAAAC,IAAA;UACA;QACA;UACA;UACA,KAAAN,QAAA,GAAAS,QAAA,CAAAlB,IAAA,CAAAwB,OAAA;QACA;MACA,SAAApB,KAAA;QACAqB,OAAA,CAAArB,KAAA,UAAAA,KAAA;QACA;QACA,IAAAA,KAAA,CAAAc,QAAA;UACAO,OAAA,CAAArB,KAAA,UAAAA,KAAA,CAAAc,QAAA,CAAAQ,MAAA;UACAD,OAAA,CAAArB,KAAA,UAAAA,KAAA,CAAAc,QAAA,CAAAlB,IAAA;UACA,KAAAS,QAAA,GAAAL,KAAA,CAAAc,QAAA,CAAAlB,IAAA,CAAAwB,OAAA;QACA,WAAApB,KAAA,CAAAuB,OAAA;UACAF,OAAA,CAAArB,KAAA;UACA,KAAAK,QAAA;QACA;UACAgB,OAAA,CAAArB,KAAA,UAAAA,KAAA,CAAAoB,OAAA;UACA,KAAAf,QAAA;QACA;MACA;QACA,KAAAD,UAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}