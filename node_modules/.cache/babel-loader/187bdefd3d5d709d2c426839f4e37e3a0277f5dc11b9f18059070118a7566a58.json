{"ast":null,"code":"import Vue from 'vue';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport axios from 'axios';\nVue.use(ElementUI);\nVue.config.productionTip = false;\n\n// 配置全局Axios，直接指向后端API地址\naxios.defaults.baseURL = 'http://localhost:8000/api';\nVue.prototype.$axios = axios;\n\n// 路由守卫\nrouter.beforeEach((to, from, next) => {\n  const isLoggedIn = !!localStorage.getItem('userId'); // 直接从 localStorage 获取登录状态\n  store.state.isLoggedIn = isLoggedIn; // 同步 store 状态\n\n  // 定义需要登录才能访问的路由\n  const requiresAuth = !['Login', 'Register'].includes(to.name);\n  if (requiresAuth) {\n    // 需要登录的页面\n    if (!isLoggedIn) {\n      next({\n        name: 'Login',\n        replace: true\n      });\n    } else {\n      next();\n    }\n  } else {\n    // 登录/注册页面\n    if (isLoggedIn) {\n      next({\n        name: 'FileList',\n        replace: true\n      });\n    } else {\n      next();\n    }\n  }\n});\n\n// 创建Vue实例时使用事件总线\nconst app = new Vue({\n  router,\n  store,\n  data: {\n    // 添加事件总线\n    eventBus: new Vue()\n  },\n  render: h => h(App)\n}).$mount('#app');\n\n// 导出事件总线，供其他组件使用\nexport const eventBus = app.eventBus;","map":{"version":3,"names":["Vue","ElementUI","App","router","store","axios","use","config","productionTip","defaults","baseURL","prototype","$axios","beforeEach","to","from","next","isLoggedIn","localStorage","getItem","state","requiresAuth","includes","name","replace","app","data","eventBus","render","h","$mount"],"sources":["E:/project/springos-vue/src/main.js"],"sourcesContent":["import Vue from 'vue'\r\nimport ElementUI from 'element-ui'\r\nimport 'element-ui/lib/theme-chalk/index.css'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store'\r\nimport axios from 'axios'\r\n\r\nVue.use(ElementUI)\r\n\r\nVue.config.productionTip = false\r\n\r\n// 配置全局Axios，直接指向后端API地址\r\naxios.defaults.baseURL = 'http://localhost:8000/api'\r\nVue.prototype.$axios = axios\r\n\r\n// 路由守卫\r\nrouter.beforeEach((to, from, next) => {\r\n  const isLoggedIn = !!localStorage.getItem('userId') // 直接从 localStorage 获取登录状态\r\n  store.state.isLoggedIn = isLoggedIn // 同步 store 状态\r\n  \r\n  // 定义需要登录才能访问的路由\r\n  const requiresAuth = !['Login', 'Register'].includes(to.name)\r\n  \r\n  if (requiresAuth) {\r\n    // 需要登录的页面\r\n    if (!isLoggedIn) {\r\n      next({ \r\n        name: 'Login',\r\n        replace: true\r\n      })\r\n    } else {\r\n      next()\r\n    }\r\n  } else {\r\n    // 登录/注册页面\r\n    if (isLoggedIn) {\r\n      next({ \r\n        name: 'FileList',\r\n        replace: true\r\n      })\r\n    } else {\r\n      next()\r\n    }\r\n  }\r\n})\r\n\r\n// 创建Vue实例时使用事件总线\r\nconst app = new Vue({\r\n  router,\r\n  store,\r\n  data: {\r\n    // 添加事件总线\r\n    eventBus: new Vue()\r\n  },\r\n  render: h => h(App)\r\n}).$mount('#app')\r\n\r\n// 导出事件总线，供其他组件使用\r\nexport const eventBus = app.eventBus "],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,sCAAsC;AAC7C,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,KAAK,MAAM,OAAO;AAEzBL,GAAG,CAACM,GAAG,CAACL,SAAS,CAAC;AAElBD,GAAG,CAACO,MAAM,CAACC,aAAa,GAAG,KAAK;;AAEhC;AACAH,KAAK,CAACI,QAAQ,CAACC,OAAO,GAAG,2BAA2B;AACpDV,GAAG,CAACW,SAAS,CAACC,MAAM,GAAGP,KAAK;;AAE5B;AACAF,MAAM,CAACU,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,UAAU,GAAG,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAC;EACpDf,KAAK,CAACgB,KAAK,CAACH,UAAU,GAAGA,UAAU,EAAC;;EAEpC;EACA,MAAMI,YAAY,GAAG,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,CAACC,QAAQ,CAACR,EAAE,CAACS,IAAI,CAAC;EAE7D,IAAIF,YAAY,EAAE;IAChB;IACA,IAAI,CAACJ,UAAU,EAAE;MACfD,IAAI,CAAC;QACHO,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACLR,IAAI,CAAC,CAAC;IACR;EACF,CAAC,MAAM;IACL;IACA,IAAIC,UAAU,EAAE;MACdD,IAAI,CAAC;QACHO,IAAI,EAAE,UAAU;QAChBC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACLR,IAAI,CAAC,CAAC;IACR;EACF;AACF,CAAC,CAAC;;AAEF;AACA,MAAMS,GAAG,GAAG,IAAIzB,GAAG,CAAC;EAClBG,MAAM;EACNC,KAAK;EACLsB,IAAI,EAAE;IACJ;IACAC,QAAQ,EAAE,IAAI3B,GAAG,CAAC;EACpB,CAAC;EACD4B,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAAC3B,GAAG;AACpB,CAAC,CAAC,CAAC4B,MAAM,CAAC,MAAM,CAAC;;AAEjB;AACA,OAAO,MAAMH,QAAQ,GAAGF,GAAG,CAACE,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}